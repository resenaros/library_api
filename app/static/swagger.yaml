swagger: "2.0"
info:
  title: "Library API"
  description: "This is a API to manage a Library"
  version: "1.0.0"
host: "library-api-1-e3jr.onrender.com"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

# MARK: Security Definitions
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

# MARK: Paths
paths:
  # Members Endpoints
  /members/login:
    post:
      tags:
        - Members
      summary: "Login endpoint, (generates token)"
      description: "Validates member credentials, generates and return a member specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "example_token"
              message: "Login successful"
              status: "success"

  /members:
    post:
      tags:
        - Members
      summary: "Endpoint to create/register a new user."
      description: "Endpoint to create a new member in our Library system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Member."
          required: true
          schema:
            $ref: "#/definitions/CreateMemberPayload"
      responses:
        201:
          description: "Successful Member Creation"
          schema:
            $ref: "#/definitions/CreateMemberResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              DOB: "1900-01-01"
              email: johnd@email.com
              password: password123

    get:
      tags:
        - Members
      summary: "Returns all Members"
      description: "Endpoint to retrieve a list of all members."
      responses:
        200:
          description: "Retrieved Members Successfully"
          schema:
            $ref: "#/definitions/AllMembers"

    put:
      tags:
        - Members
      summary: "Endpoint to update a user."
      description: "Endpoint to update a member, this is a token authenticated route, and the user must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a Member."
          required: true
          schema:
            $ref: "#/definitions/UpdateMemberPayload"
      responses:
        200:
          description: "Successfully Updated member"
          schema:
            $ref: "#/definitions/UpdateMemberResponse"
          examples:
            application/json:
              id: 1
              name: Dohn Joe
              DOB: "1900-01-01"
              email: dohnj@email.com
              password: password123

    delete:
      tags:
        - Members
      summary: "Endpoint to delete a member"
      description: "Endpoint to delete a member. Requires token authentication, member must be logged in to delete their account"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted member"
          schema:
            $ref: "#/definitions/DeleteMemberResponse"
          examples:
            application/json:
              message: "successfully deleted user <member_id>."

  /members/{id}:
    get:
      tags:
        - Members
      summary: "Endpoint to retrieve a specific member by ID"
      description: "Endpoint to retrieve a specific member by their ID."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the member to retrieve"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successfully Retrieved member"
          schema:
            $ref: "#/definitions/Member"
          examples:
            application/json:
              id: 1
              name: John Doe
              DOB: "1900-01-01"
              email: johnd@email.com
              password: password123

  # Books Endpoints
  /books:
    post:
      tags:
        - Books
      summary: "Create a new book entry."
      description: "Endpoint to add a new book to the library system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Book."
          required: true
          schema:
            $ref: "#/definitions/CreateBookPayload"
      responses:
        201:
          description: "Book Created Successfully"
          schema:
            $ref: "#/definitions/CreateBookResponse"
          examples:
            application/json:
              id: 1
              author: "George Orwell"
              desc: "A book predicting the future where all actions are regulated"
              genre: "Dystopia"
              title: "1984"

    get:
      tags:
        - Books
      summary: "Returns all Books"
      description: "Endpoint to retrieve a list of all books in the library."
      responses:
        200:
          description: "Books retrieved successfully"
          schema:
            $ref: "#/definitions/AllBooks"

  /books/{id}:
    get:
      tags:
        - Books
      summary: "Retrieve a specific book by ID"
      description: "Endpoint to retrieve a book by its ID."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the book to retrieve"
          required: true
          type: "integer"
      responses:
        200:
          description: "Book retrieved successfully"
          schema:
            $ref: "#/definitions/Book"
          examples:
            application/json:
              id: 2
              author: "Alexandre Dumas"
              desc: "A band of four fighting for honor"
              genre: "Adventure-Romance"
              title: "The Three Musketeers"

    put:
      tags:
        - Books
      summary: "Update a book (all fields required)"
      description: "Endpoint to update all fields of a book. Requires full book info in the payload."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the book to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated book information."
          required: true
          schema:
            $ref: "#/definitions/UpdateBookPayload"
      responses:
        200:
          description: "Book updated successfully"
          schema:
            $ref: "#/definitions/Book"
          examples:
            application/json:
              id: 2
              author: "Alexandre Dumas"
              desc: "A band of four fighting for honor"
              genre: "Adventure-Historical-Romance"
              title: "The Three Musketeers"

    patch:
      tags:
        - Books
      summary: "Update selected fields of a book"
      description: "Endpoint to update selected fields of a book entry."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the book to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Book fields to update."
          required: true
          schema:
            $ref: "#/definitions/PatchBookPayload"
      responses:
        200:
          description: "Book updated partially successfully"
          schema:
            $ref: "#/definitions/Book"

    delete:
      tags:
        - Books
      summary: "Delete a book"
      description: "Endpoint to delete a book by its ID."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the book to delete"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successfully Deleted book"
          schema:
            $ref: "#/definitions/DeleteBookResponse"
          examples:
            application/json:
              message: "successfully deleted book <book_id>."

  # Items Endpoints
  /items:
    post:
      tags:
        - Items
      summary: "Create a new item"
      description: "Endpoint to add a new item to the library system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Item."
          required: true
          schema:
            $ref: "#/definitions/CreateItemPayload"
      responses:
        201:
          description: "Item Created Successfully"
          schema:
            $ref: "#/definitions/Item"
          examples:
            application/json:
              id: 1
              name: "Pumpkin Spice Latte"
              price: 13.02

    get:
      tags:
        - Items
      summary: "Returns all Items"
      description: "Endpoint to retrieve a list of all items in the library."
      responses:
        200:
          description: "Items retrieved successfully"
          schema:
            $ref: "#/definitions/AllItems"

  /items/{id}:
    put:
      tags:
        - Items
      summary: "Update an item (all fields required)"
      description: "Endpoint to update all fields of an item. Requires full item info in the payload."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the item to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated item information."
          required: true
          schema:
            $ref: "#/definitions/UpdateItemPayload"
      responses:
        200:
          description: "Item updated successfully"
          schema:
            $ref: "#/definitions/Item"
          examples:
            application/json:
              id: 2
              name: "Pumpkin Spice Latte"
              price: 13.02

    delete:
      tags:
        - Items
      summary: "Delete an item"
      description: "Endpoint to delete an item by its ID."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the item to delete"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successfully Deleted item"
          schema:
            $ref: "#/definitions/DeleteItemResponse"
          examples:
            application/json:
              message: "successfully deleted item <item_id>."

  # Loans Endpoints
  /loans:
    post:
      tags:
        - Loans
      summary: "Create a new loan"
      description: "Endpoint to create a new loan record for a member."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Loan."
          required: true
          schema:
            $ref: "#/definitions/CreateLoanPayload"
      responses:
        201:
          description: "Loan Created Successfully"
          schema:
            $ref: "#/definitions/Loan"
          examples:
            application/json:
              id: 1
              loan_date: "2025-03-03"
              member_id: 3
              books: [2, 4]

    get:
      tags:
        - Loans
      summary: "Returns all Loans"
      description: "Endpoint to retrieve a list of all loans in the library."
      responses:
        200:
          description: "Loans retrieved successfully"
          schema:
            $ref: "#/definitions/AllLoans"

  /loans/{id}:
    patch:
      tags:
        - Loans
      summary: "Update selected fields of a loan"
      description: "Endpoint to update selected fields of a loan record."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the loan to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Loan fields to update."
          required: true
          schema:
            $ref: "#/definitions/UpdateLoanPayload"
      responses:
        200:
          description: "Loan updated successfully"
          schema:
            $ref: "#/definitions/Loan"

    put:
      tags:
        - Loans
      summary: "Add/Remove books from a loan"
      description: "Endpoint to add or remove books from a loan."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the loan to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "IDs of books to add or remove."
          required: true
          schema:
            $ref: "#/definitions/UpdateLoanPayload"
      responses:
        200:
          description: "Books updated for loan"
          schema:
            $ref: "#/definitions/Loan"

  /loans/{id}/books:
    get:
      tags:
        - Loans
      summary: "Get books for a loan"
      description: "Endpoint to retrieve all books for a specific loan."
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the loan"
          required: true
          type: "integer"
      responses:
        200:
          description: "Books retrieved for loan"
          schema:
            type: "array"
            items:
              type: "integer"

  # Orders Endpoints
  /orders:
    post:
      tags:
        - Orders
      summary: "Create a new order"
      description: "Endpoint to create a new order for items."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Order."
          required: true
          schema:
            $ref: "#/definitions/CreateOrderPayload"
      responses:
        201:
          description: "Order Created Successfully"
          schema:
            $ref: "#/definitions/CreateOrderResponse"
          examples:
            application/json:
              id: 1
              member_id: 3
              item_quantity:
                - item_id: 3
                  item_quantity: 3

# MARK: Definitions
definitions:
  # Members
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
      - email
      - password

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CreateMemberPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
        format: date
      password:
        type: "string"
    required:
      - name
      - email
      - DOB
      - password

  CreateMemberResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
      password:
        type: "string"

  Member:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
      password:
        type: "string"

  AllMembers:
    type: "array"
    items:
      $ref: "#/definitions/Member"

  UpdateMemberPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
        format: "date"
      password:
        type: "string"
    required:
      - name
      - email
      - DOB
      - password

  UpdateMemberResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
      password:
        type: "string"

  DeleteMemberResponse:
    type: "object"
    properties:
      message:
        type: "string"

  # Books
  CreateBookPayload:
    type: "object"
    properties:
      author:
        type: "string"
      desc:
        type: "string"
      genre:
        type: "string"
      title:
        type: "string"
    required:
      - author
      - desc
      - genre
      - title

  CreateBookResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      author:
        type: "string"
      desc:
        type: "string"
      genre:
        type: "string"
      title:
        type: "string"

  AllBooks:
    type: "array"
    items:
      $ref: "#/definitions/Book"

  Book:
    type: "object"
    properties:
      id:
        type: "integer"
      author:
        type: "string"
      desc:
        type: "string"
      genre:
        type: "string"
      title:
        type: "string"

  UpdateBookPayload:
    type: "object"
    properties:
      author:
        type: "string"
      desc:
        type: "string"
      genre:
        type: "string"
      title:
        type: "string"
    required:
      - author
      - desc
      - genre
      - title

  PatchBookPayload:
    type: "object"
    properties:
      author:
        type: "string"
      desc:
        type: "string"
      genre:
        type: "string"
      title:
        type: "string"

  DeleteBookResponse:
    type: "object"
    properties:
      message:
        type: "string"

  # Items
  CreateItemPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
    required:
      - name
      - price

  Item:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

  AllItems:
    type: "array"
    items:
      $ref: "#/definitions/Item"

  UpdateItemPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
    required:
      - name
      - price

  DeleteItemResponse:
    type: "object"
    properties:
      message:
        type: "string"

  # Loans
  CreateLoanPayload:
    type: "object"
    properties:
      loan_date:
        type: "string"
        format: "date"
      member_id:
        type: "integer"
    required:
      - loan_date
      - member_id

  Loan:
    type: "object"
    properties:
      id:
        type: "integer"
      loan_date:
        type: "string"
      member_id:
        type: "integer"
      books:
        type: "array"
        items:
          type: "integer"

  AllLoans:
    type: "array"
    items:
      $ref: "#/definitions/Loan"

  UpdateLoanPayload:
    type: "object"
    properties:
      loan_date:
        type: "string"
        format: "date"
      member_id:
        type: "integer"
      add_book_ids:
        type: "array"
        items:
          type: "integer"
      remove_book_ids:
        type: "array"
        items:
          type: "integer"

  # Orders
  CreateOrderPayload:
    type: "object"
    properties:
      member_id:
        type: "integer"
      item_quantity:
        type: "array"
        items:
          type: "object"
          properties:
            item_id:
              type: "integer"
            item_quantity:
              type: "integer"
    required:
      - member_id
      - item_quantity

  CreateOrderResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      member_id:
        type: "integer"
      item_quantity:
        type: "array"
        items:
          type: "object"
          properties:
            item_id:
              type: "integer"
            item_quantity:
              type: "integer"
